from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from modules.config import MAIN_MENU, BULK_MENU, BULK_ACTION, BULK_CONFIRM
from modules.api.bulk import BulkAPI
from modules.api.users import UserAPI
from modules.handlers.start_handler import show_main_menu

async def show_bulk_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk operations menu"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ–º", callback_data="bulk_reset_all_traffic")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="bulk_delete_inactive")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö", callback_data="bulk_delete_expired")],
        [InlineKeyboardButton("üîÑ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="bulk_update_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üîÑ *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏*\n\n"
    message += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return BULK_MENU

async def handle_bulk_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bulk operations menu selection"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "bulk_reset_all_traffic":
        # Confirm reset all traffic
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ–º", callback_data="confirm_reset_all_traffic"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_bulk")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return BULK_CONFIRM

    elif data == "bulk_delete_inactive":
        # Confirm delete inactive
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="confirm_delete_inactive"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_bulk")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï–• –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return BULK_CONFIRM

    elif data == "bulk_delete_expired":
        # Confirm delete expired
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö", callback_data="confirm_delete_expired"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_bulk")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º?",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return BULK_CONFIRM

    elif data == "bulk_update_all":
        context.user_data["waiting_for"] = "bulk_update_all"
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `field=value`.\n"
            "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
            "–ü—Ä–∏–º–µ—Ä: `trafficLimitBytes=0 expireAt=2024-12-31`",
            parse_mode="Markdown"
        )
        return BULK_MENU

    elif data == "back_to_bulk":
        await show_bulk_menu(update, context)
        return BULK_MENU

    elif data == "back_to_main":
        await show_main_menu(update, context)
        return MAIN_MENU

    return BULK_MENU

async def handle_bulk_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bulk operation confirmation"""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "confirm_reset_all_traffic":
        # Reset all users traffic
        result = await BulkAPI.bulk_reset_all_users_traffic()
        
        if result:
            message = "‚úÖ –¢—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞."
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return BULK_MENU

    elif data == "confirm_delete_inactive":
        # Delete all inactive users
        result = await BulkAPI.bulk_delete_users_by_status("DISABLED")
        
        if result:
            message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {result.get('deletedCount', 0)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return BULK_MENU

    elif data == "confirm_delete_expired":
        # Delete all expired users
        result = await BulkAPI.bulk_delete_users_by_status("EXPIRED")
        
        if result:
            message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {result.get('deletedCount', 0)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        
        # Add back button
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return BULK_MENU

    elif data == "back_to_bulk":
        await show_bulk_menu(update, context)
        return BULK_MENU

    return BULK_MENU

async def handle_bulk_update_all_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process text input for bulk update of all users"""
    text = update.message.text.strip()
    fields = {}
    for pair in text.split():
        if '=' not in pair:
            continue
        key, value = pair.split('=', 1)
        if key == 'trafficLimitBytes':
            try:
                fields[key] = int(value)
            except ValueError:
                continue
        else:
            fields[key] = value

    result = None
    if fields:
        result = await BulkAPI.bulk_update_all_users(fields)

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]]
    if result:
        message = "‚úÖ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."
    else:
        message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ."

    await update.message.reply_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown",
    )

    context.user_data.pop("waiting_for", None)
    return BULK_MENU
